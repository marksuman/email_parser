#!/usr/bin/env python

import os
import re
import sys
import csv
import errno
import email
from argparse import ArgumentParser

class EmailParser(object):
    """Parses MSG files from the provided path, either a directory or single file
    and outputs the specified fields (self.output_fields) to a CSV file.
    """

    # Defaults
    OUTPUT_PATH = os.path.join(os.getcwd(), 'output.csv')
    INPUT_PATH = os.path.join(os.getcwd(), 'data')
    INPUT_EXTENSIONS = [ 'msg' ]

    # Output field names, input field names ordered by preference
    output_fields = [ 'Date Sent', 'Sender', 'Subject' ]
    input_fields = { 'Date Sent': [ 'Date' ],
                     'Sender': [ 'From', 'Reply-To', 'Return-Path' ],
                     'Subject': [ 'Subject' ] }

    def __init__(self, input_path=None, output_path=None, input_extensions=None):

        self.input_path = input_path or self.INPUT_PATH
        self.output_path = output_path or self.OUTPUT_PATH
        self.input_extensions = input_extensions or self.INPUT_EXTENSIONS
        self.file_queue = []

    def output_fields_to_csv(self):
        """Determines if our input path is a directory or single file, loads
        files from our input path into the file queue, opens a csv writer and
        writes results as they are yielded.
        """

        if os.path.isdir(self.input_path):
            self.queue_files_from_input_directory()
        elif os.path.isfile(self.input_path):
            self.file_queue = [ self.input_path ]

        try:
            with open(self.output_path, 'wb') as output_file:
                writer = csv.DictWriter(output_file, fieldnames=self.output_fields,
                                        delimiter=',', escapechar='\\', quoting=csv.QUOTE_NONE,
                                        doublequote=True)

                for input_fields in self.get_input_fields():
                    writer.writerow(input_fields)

        except IOError as e:
            if e.errno == errno.EACCES:
                print >> sys.stderr, 'IOError: Access error while attempting to write to output file.'
            else:
                print >> sys.stderr, 'IOError: Unknown error while writing to output file.'
            
            sys.exit(1)
            
    def get_input_fields(self):
        """Loops through our file queue, parsing MSG files for the specified fields.
        Checks by case for field names, then results to case insensitive search if not found,
        prints errors to stderr.
        """

        if not self.file_queue:
            print >> sys.stderr, 'No files were queued to process.'
            sys.exit(0)

        try:
            output_format = dict( [ (field, None) for field in self.output_fields ] )

            for input_file_path in self.file_queue:
                with open(input_file_path, 'r') as input_file:

                    input_msg = email.message_from_file(input_file)
                    file_output = output_format.copy()
                    
                    # Lazy way of searching for fields insensitive to capitalization
                    i_input_fields = dict( (key.lower(), val) for key, val in input_msg.__dict__.items() )

                    for output_field in self.output_fields:
                        for input_field in self.input_fields[output_field]:

                            # For our case insensitive search, used as a last resort
                            i_input_field = input_field.lower()

                            if input_field in input_msg:
                                file_output[output_field] = "%r" % input_msg[input_field]
                                break
                            elif i_input_field in i_input_fields:
                                file_output[output_field] = "%r" % i_input_fields[i_input_field]
                                break
                            else:
                                file_output[output_field] = ''

                    yield file_output

        except IOError as e:
            if e.errno == errno.EACCES:
                print >> sys.stderr, 'IOError: Access error while attempting to read from input file.'
            else:
                print >> sys.stderr, 'IOError: Unknown error while reading from input file.'
        except:
            print >> sys.stderr, 'Unexpected error occurred in EmailParser.get_input_fields: '
            print >> sys.stderr, sys.exc_info()[0]

    def queue_files_from_input_directory(self):
        """ Queues list of files from directory (non-recursive) with the correct extension.
        """

        for filename in os.listdir(self.input_path):

            full_path = os.path.join(self.input_path, filename)

            # Skip directories and extension-less files
            if not os.path.isfile(full_path) or not '.' in filename:
                print 'Skipping %s' % filename
                continue

            ext_idx = filename.rfind('.', 0, len(filename))

            if not filename[(ext_idx+1):] in self.input_extensions:
                # Not an acceptable input file, skip
                continue

            self.file_queue.append(full_path)


if __name__ == '__main__':
    parser = ArgumentParser(description='Parses MSG formatted email messages for "Date Sent", "Sender", '\
                                        +'"Subject" and outputs them to a CSV file.')
    parser.add_argument('-i', '--input_path=',
                        help='Email file or directory with email files in it.',
                        action='store',
                        dest='input_path',
                        default=None)
    parser.add_argument('-o', '--output_path=',
                        help='Output file path.',
                        action='store',
                        dest='output_path',
                        default=None)
    parser.add_argument('--input_extensions=',
                        help='Comma separated list of extensions to process '\
                              +'when scanning a directory for email files.',
                        action='store',
                        dest='input_extensions',
                        default=None)
    args = parser.parse_args()

    if args.input_extensions:
        args.input_extensions = re.sub('[\ \.]', '', args.input_extensions).split(',')

    email_parser = EmailParser(**vars(args))
    email_parser.output_fields_to_csv()
